package modules_pkg;

import uvm_pkg::*;
import sequences::*;


typedef uvm_sequencer #(cp_ins_trans) cpu_sequencer_in;

class dut_config extends uvm_object;
    `uvm_object_utils(dut_config)

    virtual mbus mbus_vi;
    virtual cbus cbus_vi;
    virtual tb_bus tbus_vi;

endclass: dut_config

class driver_in extends uvm_driver#(cp_ins_trans);
    `uvm_component_utils(driver_in)

    dut_config dut_config_0;
    virtual mbus mbus_vi;  
    virtual cbus cbus_vi;  
    virtual tb_bus tbus_vi;

    function new(string name, uvm_component parent);
        super.new(name,parent);
    endfunction: new

    function void build_phase(uvm_phase phase);
       
       assert( uvm_config_db #(dut_config)::get(this, "", "dut_config", dut_config_0));
       mbus_vi = dut_config_0.mbus_vi;
       cbus_vi = dut_config_0.cbus_vi;
       tbus_vi = dut_config_0.tbus_vi;

    endfunction : build_phase
   
    task run_phase(uvm_phase phase);
      forever
      begin
        cp_ins_trans instr;
        
        @(posedge dut_vi_in.clk);
        seq_item_port.get_next_item(instr);
        
        //TODO: DRIVING INSTRUCTIONS TO CORRESPONDING CPU's
        tbus_vi.tb_ins_array <= instr.tb_ins;
        tbus_vi.tb_ins_addr <= instr.tb_addr;
        
      end
    endtask: run_phase

endclass: driver_in

class monitor extends uvm_monitor;
    `uvm_component_utils(monitor)

    uvm_analysis_port #(cpu_ins_trans) aport;

    dut_config dut_config_0;

    virtual tb_bus tbus_vi;
    
    integer i;

    function new(string name, uvm_component parent);
        super.new(name,parent);
    endfunction: new

    function void build_phase(uvm_phase phase);
        dut_config_0=dut_config::type_id::create("config");
        aport=new("aport",this);
        assert( uvm_config_db #(dut_config)::get(this, "", "dut_config", dut_config_0) );
        tbus_vi=dut_config_0.tbus_vi;

    endfunction: build_phase

    task run_phase(uvm_phase phase);
    @(posedge dut_vi_in.clk);
      forever
      begin//{
        cpu_ins_trans trans;
        trans = cpu_ins_trans::type_id::create("trans");
        for(i=0;i<4;i=i+1)begin//{
            if(tbus_ack[i]) begin//{
                trans.tb_ins[i]=tbus_vi.tb_ins_array[i];
                trans.monitor_flag = 1;
            end//}
            else
                trans.monitor_flag = 0;
        end//}
        aport.write(trans);
      end//}
    endtask: run_phase

endclass: monitor

class agent_in extends uvm_agent;
    `uvm_component_utils(agent_in)

    uvm_analysis_port #(cp_ins_trans) aport;

    cpu_sequencer_in cpu_sequencer_in_h;
    driver_in cpu_driver;

    function new(string name, uvm_component parent);
        super.new(name,parent);
    endfunction: new


    function void build_phase(uvm_phase phase);
        aport=new("aport",this);
        cpu_sequencer_in_h=cpu_sequencer_in::type_id::create("cpu_sequencer_in_h",this);
        cpu_driver=driver_in::type_id::create("cpu_driver",this);
    endfunction: build_phase

    function void connect_phase(uvm_phase phase);
        cpu_driver.seq_item_port.connect(cpu_sequencer_in_h.seq_item_export);
    endfunction: connect_phase

endclass: agent_in

class agent_out extends uvm_agent;
    `uvm_component_utils(agent_out)

    uvm_analysis_port #(cp_ins_trans) aport;

    monitor cpu_monitor;

    function new(string name, uvm_component parent);
        super.new(name,parent);
    endfunction: new

    function void build_phase(uvm_phase phase);
        aport=new("aport",this);
        cpu_monitor=monitor::type_id::create("cpu_monitor",this);
    endfunction: build_phase

    function void connect_phase(uvm_phase phase);
        cpu_monitor.aport.connect(aport);
    endfunction: connect_phase

endclass: agent_out

class env extends uvm_env;
    `uvm_component_utils(env)

    agent_in cpu_agent_in_h;
    agent_out cpu_agent_out_h;
    subscriber cpu_subscriber_in_h;
    scoreboard cpu_scoreboard_h;

    function new(string name, uvm_component parent);
        super.new(name,parent);
    endfunction: new

    function void build_phase(uvm_phase phase);
        alu_agent_in_h = alu_agent_in::type_id::create("alu_agent_in_h",this);
        alu_agent_out_h = alu_agent_out::type_id::create("alu_agent_out_h",this);
        alu_subscriber_in_h = alu_subscriber_in::type_id::create("alu_subscriber_in_h",this);
        alu_subscriber_out_h = alu_subscriber_out::type_id::create("alu_subscriber_out_h",this);
        alu_scoreboard_h = alu_scoreboard::type_id::create("alu_scoreboard_h",this);
    endfunction: build_phase

    function void connect_phase(uvm_phase phase);
        alu_agent_in_h.aport.connect(alu_subscriber_in_h.analysis_export);
        alu_agent_out_h.aport.connect(alu_subscriber_out_h.analysis_export);
        alu_agent_in_h.aport.connect(alu_scoreboard_h.sb_in);
        alu_agent_out_h.aport.connect(alu_scoreboard_h.sb_out);
    endfunction: connect_phase

    function void start_of_simulation_phase(uvm_phase phase);
        //TODO: Use this command to set the verbosity of the testbench. By
        //default, it is UVM_MEDIUM
        uvm_top.set_report_verbosity_level_hier(UVM_HIGH);
    endfunction: start_of_simulation_phase

endclass: alu_env

class alu_test extends uvm_test;
    `uvm_component_utils(alu_test)

    alu_dut_config dut_config_0;
    alu_env alu_env_h;

    function new(string name, uvm_component parent);
        super.new(name,parent);
    endfunction: new

    function void build_phase(uvm_phase phase);
        dut_config_0 = new();
        if(!uvm_config_db #(virtual dut_in)::get( this, "", "dut_vi_in", dut_config_0.dut_vi_in))
          `uvm_fatal("NOVIF", "No virtual interface set for dut_in")
        
        if(!uvm_config_db #(virtual dut_out)::get( this, "", "dut_vi_out", dut_config_0.dut_vi_out))
          `uvm_fatal("NOVIF", "No virtual interface set for dut_out")
            
        uvm_config_db #(alu_dut_config)::set(this, "*", "dut_config", dut_config_0);
        alu_env_h = alu_env::type_id::create("alu_env_h", this);
    endfunction: build_phase

endclass:alu_test

endpackage: modules_pkg

